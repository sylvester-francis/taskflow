name: Security Scan

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # SAST - Static Application Security Testing
  sast:
    name: Static Security Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install security tools
      run: |
        pip install bandit safety semgrep

    - name: Run Bandit (Python Security Linter)
      run: |
        bandit -r app/ -f json -o bandit-results.json
      continue-on-error: true

    - name: Run Safety (Dependency Vulnerability Scanner)
      run: |
        safety check --json --output safety-results.json
      continue-on-error: true

    - name: Run Semgrep (Multi-language Static Analysis)
      run: |
        semgrep --config auto app/ --json --output semgrep-results.json
      continue-on-error: true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-results.json
          safety-results.json
          semgrep-results.json

  # Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t taskflow:security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'taskflow:security-scan'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Run Trivy for JSON output
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'taskflow:security-scan'
        format: 'json'
        output: 'trivy-results.json'

    - name: Upload Trivy scan results
      uses: actions/upload-artifact@v3
      with:
        name: trivy-results
        path: trivy-results.json

  # Secrets Detection
  secrets-detection:
    name: Secrets Detection
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # License Compliance
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pip-licenses

    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=plain-vertical

    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: licenses.json

  # OWASP Dependency Check
  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      id: depcheck
      with:
        project: 'TaskFlow'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --suppression suppression.xml

    - name: Upload OWASP results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports/

  # Security Summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [sast, container-security, secrets-detection, license-check, dependency-check]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "- ✅ SAST (Static Analysis): ${{ needs.sast.result }}" >> security-summary.md
        echo "- ✅ Container Security: ${{ needs.container-security.result }}" >> security-summary.md
        echo "- ✅ Secrets Detection: ${{ needs.secrets-detection.result }}" >> security-summary.md
        echo "- ✅ License Compliance: ${{ needs.license-check.result }}" >> security-summary.md
        echo "- ✅ Dependency Check: ${{ needs.dependency-check.result }}" >> security-summary.md
        echo "" >> security-summary.md
        echo "See individual job logs for detailed results." >> security-summary.md

    - name: Comment PR with security results (if PR)
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('security-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });