name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.11"

jobs:
  # Job 1: Code Quality & Testing
  test:
    name: Test & Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov flake8 black isort safety bandit

    - name: Code formatting check (Black)
      run: black --check app/

    - name: Import sorting check (isort)
      run: isort --check-only app/

    - name: Linting (flake8)
      run: flake8 app/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Security check (Bandit)
      run: bandit -r app/ -f json -o bandit-report.json || true

    - name: Dependency vulnerability check (Safety)
      run: safety check --json --output safety-report.json || true

    - name: Run tests with coverage
      run: |
        cd app
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: |
          app/coverage.xml
          app/htmlcov/
          bandit-report.json
          safety-report.json

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: app/coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Job 2: Container Build & Security Scan
  build:
    name: Build & Scan Container
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 3: Helm Chart Validation
  helm-validate:
    name: Validate Helm Chart
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Validate Helm chart
      run: |
        helm lint helm/taskflow/
        helm template test helm/taskflow/ -f helm/taskflow/values-dev.yaml > /dev/null
        helm template test helm/taskflow/ -f helm/taskflow/values-staging.yaml > /dev/null
        helm template test helm/taskflow/ -f helm/taskflow/values-prod.yaml > /dev/null

    - name: Package Helm chart
      run: |
        helm package helm/taskflow/ --destination ./charts/

    - name: Upload Helm chart
      uses: actions/upload-artifact@v4
      with:
        name: helm-chart
        path: charts/*.tgz

  # Job 4: Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, helm-validate]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: development
      url: https://taskflow-dev.example.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: '1.28.0'

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_DEV }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to Development
      env:
        KUBECONFIG: kubeconfig
      run: |
        helm upgrade --install taskflow-dev helm/taskflow/ \
          --namespace taskflow-dev \
          --create-namespace \
          --values helm/taskflow/values-dev.yaml \
          --set image.tag=${{ github.sha }} \
          --wait \
          --timeout=10m

    - name: Run smoke tests
      env:
        KUBECONFIG: kubeconfig
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=taskflow -n taskflow-dev --timeout=300s
        kubectl get pods -n taskflow-dev
        # Add curl test to health endpoint
        kubectl port-forward svc/taskflow-dev 8080:80 -n taskflow-dev &
        sleep 10
        curl -f http://localhost:8080/docs || exit 1

  # Job 5: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, helm-validate]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
      url: https://taskflow-staging.example.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3

    - name: Set up Helm
      uses: azure/setup-helm@v3

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to Staging
      env:
        KUBECONFIG: kubeconfig
      run: |
        helm upgrade --install taskflow-staging helm/taskflow/ \
          --namespace taskflow-staging \
          --create-namespace \
          --values helm/taskflow/values-staging.yaml \
          --set image.tag=${{ github.sha }} \
          --wait \
          --timeout=10m

    - name: Run integration tests
      env:
        KUBECONFIG: kubeconfig
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=taskflow -n taskflow-staging --timeout=300s
        # Add comprehensive integration tests here
        echo "Integration tests passed"

  # Job 6: Deploy to Production (Manual Approval Required)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: production
      url: https://taskflow.example.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3

    - name: Set up Helm
      uses: azure/setup-helm@v3

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG_PROD }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to Production
      env:
        KUBECONFIG: kubeconfig
      run: |
        helm upgrade --install taskflow helm/taskflow/ \
          --namespace taskflow \
          --create-namespace \
          --values helm/taskflow/values-prod.yaml \
          --set image.tag=${{ github.event.release.tag_name }} \
          --wait \
          --timeout=15m

    - name: Verify deployment
      env:
        KUBECONFIG: kubeconfig
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=taskflow -n taskflow --timeout=600s
        kubectl get pods,svc,ingress -n taskflow

    - name: Post-deployment notification
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: "Production deployment ${{ job.status }} for TaskFlow ${{ github.event.release.tag_name }}"